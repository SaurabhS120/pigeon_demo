// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.pigeon_demo1.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MyMessages {
    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    private @NonNull String body;

    public @NonNull String getBody() {
      return body;
    }

    public void setBody(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"body\" is null.");
      }
      this.body = setterArg;
    }

    private @NonNull String email;

    public @NonNull String getEmail() {
      return email;
    }

    public void setEmail(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"email\" is null.");
      }
      this.email = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MyMessages() {}

    public static final class Builder {

      private @Nullable String title;

      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String body;

      public @NonNull Builder setBody(@NonNull String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable String email;

      public @NonNull Builder setEmail(@NonNull String setterArg) {
        this.email = setterArg;
        return this;
      }

      public @NonNull MyMessages build() {
        MyMessages pigeonReturn = new MyMessages();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        pigeonReturn.setEmail(email);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(title);
      toListResult.add(body);
      toListResult.add(email);
      return toListResult;
    }

    static @NonNull MyMessages fromList(@NonNull ArrayList<Object> list) {
      MyMessages pigeonResult = new MyMessages();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object body = list.get(1);
      pigeonResult.setBody((String) body);
      Object email = list.get(2);
      pigeonResult.setEmail((String) email);
      return pigeonResult;
    }
  }

  private static class MessagesApiCodec extends StandardMessageCodec {
    public static final MessagesApiCodec INSTANCE = new MessagesApiCodec();

    private MessagesApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return MyMessages.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof MyMessages) {
        stream.write(128);
        writeValue(stream, ((MyMessages) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MessagesApi {

    @NonNull 
    List<MyMessages> getMessages(@NonNull String fromEmail);

    /** The codec used by MessagesApi. */
    static MessageCodec<Object> getCodec() {
      return MessagesApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MessagesApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MessagesApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessagesApi.getMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String fromEmailArg = (String) args.get(0);
                  if (fromEmailArg == null) {
                    throw new NullPointerException("fromEmailArg unexpectedly null.");
                  }
                  List<MyMessages> output = api.getMessages(fromEmailArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
