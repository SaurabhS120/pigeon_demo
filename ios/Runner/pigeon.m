// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface MyMessages ()
+ (MyMessages *)fromList:(NSArray *)list;
+ (nullable MyMessages *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation MyMessages
+ (instancetype)makeWithTitle:(NSString *)title
    body:(NSString *)body
    email:(NSString *)email {
  MyMessages* pigeonResult = [[MyMessages alloc] init];
  pigeonResult.title = title;
  pigeonResult.body = body;
  pigeonResult.email = email;
  return pigeonResult;
}
+ (MyMessages *)fromList:(NSArray *)list {
  MyMessages *pigeonResult = [[MyMessages alloc] init];
  pigeonResult.title = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.body = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.body != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.email != nil, @"");
  return pigeonResult;
}
+ (nullable MyMessages *)nullableFromList:(NSArray *)list {
  return (list) ? [MyMessages fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.title ?: [NSNull null]),
    (self.body ?: [NSNull null]),
    (self.email ?: [NSNull null]),
  ];
}
@end

@interface MessagesApiCodecReader : FlutterStandardReader
@end
@implementation MessagesApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [MyMessages fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MessagesApiCodecWriter : FlutterStandardWriter
@end
@implementation MessagesApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[MyMessages class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MessagesApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessagesApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessagesApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessagesApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessagesApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MessagesApiCodecReaderWriter *readerWriter = [[MessagesApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void MessagesApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessagesApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessagesApi.getMessages"
        binaryMessenger:binaryMessenger
        codec:MessagesApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesFromEmail:error:)], @"MessagesApi api (%@) doesn't respond to @selector(getMessagesFromEmail:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_fromEmail = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<MyMessages *> *output = [api getMessagesFromEmail:arg_fromEmail error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
